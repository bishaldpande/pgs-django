~/w/c/P/pgs-django day2 ❯ python3
Python 3.10.14 (main, Aug 28 2024, 16:30:58) [Clang 15.0.0 (clang-1500.3.9.4)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> from blog.models import Blog
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/Users/stan/work/classes/PBS/pgs-django/blog/models.py", line 4, in <module>
    class Blog(models.Model):
  File "/Users/stan/work/classes/PBS/pgs-django/venv/lib/python3.10/site-packages/django/db/models/base.py", line 129, in __new__
    app_config = apps.get_containing_app_config(module)
  File "/Users/stan/work/classes/PBS/pgs-django/venv/lib/python3.10/site-packages/django/apps/registry.py", line 260, in get_containing_app_config
    self.check_apps_ready()
  File "/Users/stan/work/classes/PBS/pgs-django/venv/lib/python3.10/site-packages/django/apps/registry.py", line 137, in check_apps_ready
    settings.INSTALLED_APPS
  File "/Users/stan/work/classes/PBS/pgs-django/venv/lib/python3.10/site-packages/django/conf/__init__.py", line 81, in __getattr__
    self._setup(name)
  File "/Users/stan/work/classes/PBS/pgs-django/venv/lib/python3.10/site-packages/django/conf/__init__.py", line 61, in _setup
    raise ImproperlyConfigured(
django.core.exceptions.ImproperlyConfigured: Requested setting INSTALLED_APPS, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.
>>> 
KeyboardInterrupt
>>> 

~/w/c/P/pgs-django day2 ❯ python manage.py she
ll
Python 3.10.14 (main, Aug 28 2024, 16:30:58) [Clang 15.0.0 (clang-1500.3.9.4)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from blog.models import Blog
>>> Blog.objects.create()
<Blog: >
>>> Blog.objects.create(title="abc")
<Blog: abc>
>>> Blog.objects.create(title="abc1", content 
= "test")
<Blog: abc1>
>>> for _ in range(100):
...   Blog.objects.create(title = Faker().name(), content = Faker().text())
... 
Traceback (most recent call last):
  File "<console>", line 2, in <module>
NameError: name 'Faker' is not defined
>>> Faker().address()
KeyboardInterrupt
>>> from faker import Faker
>>> fake = Faker()
>>> for _ in range(100):
...     Blog.objects.create(title = fake.name(), content=fake.text())
... 
<Blog: Tabitha Evans>
<Blog: Mrs. Mary White>
<Blog: Samantha Blair>
<Blog: Scott Mitchell>
<Blog: Mr. Jason Tucker>
<Blog: Robert Harper>
<Blog: Jason Murray>
<Blog: Courtney Jones>
<Blog: Bianca Li>
<Blog: Samantha Mcdaniel>
<Blog: Erin Dixon>
<Blog: Jason Wood>
<Blog: James Dillon>
<Blog: Julie Smith>
<Blog: Chelsea Foley>
<Blog: Dawn Clark>
<Blog: Jesse Davis>
<Blog: Barbara Avila>
<Blog: Kevin Coleman>
<Blog: Brooke Smith>
<Blog: Jeffrey Frank>
<Blog: Gary Allen>
<Blog: Jennifer Weeks>
<Blog: Jamie Lewis>
<Blog: Kimberly Combs>
<Blog: Eric Torres>
<Blog: Christopher Hester>
<Blog: Mackenzie Kennedy>
<Blog: Michele Anderson>
<Blog: Kenneth Wolf>
<Blog: Tracy Tanner>
<Blog: Keith Jones>
<Blog: Richard Grant>
<Blog: Gina Wyatt>
<Blog: Timothy Jones>
<Blog: Alexis Taylor>
<Blog: Brooke Whitaker>
<Blog: Savannah Scott>
<Blog: Jessica Woods>
<Blog: Timothy Mendoza>
<Blog: John Grant>
<Blog: Monique Stevens>
<Blog: Bradley Vega>
<Blog: John Lopez>
<Blog: Aaron Diaz>
<Blog: Rodney Wagner>
<Blog: Andrew Hayes>
<Blog: Cody Kelly>
<Blog: Samantha Robbins>
<Blog: Katherine Shaw>
<Blog: Jessica Moore>
<Blog: Jacqueline Harris>
<Blog: Richard Harris>
<Blog: Emily Chandler>
<Blog: Scott Fischer>
<Blog: Gerald Moore>
<Blog: Raymond Miles>
<Blog: Elizabeth Mann>
<Blog: Lauren Wells>
<Blog: Stephanie Hampton>
<Blog: Angela Hunter>
<Blog: Patrick Smith>
<Blog: Bobby Huff>
<Blog: Jonathan Meza>
<Blog: Brendan Cervantes>
<Blog: Elizabeth Smith>
<Blog: Angela Hood>
<Blog: Miranda Gutierrez>
<Blog: Scott Thomas>
<Blog: Grace Robinson>
<Blog: Teresa Winters>
<Blog: Marvin Collins>
<Blog: Beth Tyler>
<Blog: Nicole Watson>
<Blog: Ross Harrington>
<Blog: Paul Watts>
<Blog: Cameron Garcia>
<Blog: Willie Cabrera>
<Blog: George Harrison>
<Blog: Robert Cook>
<Blog: Mrs. Ashley Lopez>
<Blog: Joel Prince>
<Blog: Kendra Thompson>
<Blog: Jason Jackson>
<Blog: Lisa Kirk MD>
<Blog: Bryan Terrell>
<Blog: Todd Smith>
<Blog: Connie Allen>
<Blog: Shawn Martin>
<Blog: Emily Kent>
<Blog: Jason Kramer>
<Blog: Diane Lopez>
<Blog: April Cole>
<Blog: Kayla Rogers>
<Blog: Julia Harper>
<Blog: Darren Harrell>
<Blog: Russell Ochoa>
<Blog: Brian Smith>
<Blog: Jeanne Vasquez>
<Blog: Alexander Rivera>
>>> Blog.objects.all()
<QuerySet [<Blog: Test>, <Blog: test 3>, <Blog: >, <Blog: abc>, <Blog: abc1>, <Blog: Tabitha Evans>, <Blog: Mrs. Mary White>, <Blog: Samantha Blair>, <Blog: Scott Mitchell>, <Blog: Mr. Jason Tucker>, <Blog: Robert Harper>, <Blog: Jason Murray>, <Blog: Courtney Jones>, <Blog: Bianca Li>, <Blog: Samantha Mcdaniel>, <Blog: Erin Dixon>, <Blog: Jason Wood>, <Blog: James Dillon>, <Blog: Julie Smith>, <Blog: Chelsea Foley>, '...(remaining elements truncated)...']>
>>> Blog.objects.get(id=3)
<Blog: >
>>>  blog = Blog.objects.get(id=105)
  File "<console>", line 1
    blog = Blog.objects.get(id=105)
IndentationError: unexpected indent
>>> blog.title
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'blog' is not defined
>>> blog.content
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'blog' is not defined
>>>  blog = Blog.objects.get(id=105)
  File "<console>", line 1
    blog = Blog.objects.get(id=105)
IndentationError: unexpected indent
>>> blog = Blog.objects.get(id=105)
>>> blog.content
'Language less family effect value blood lot. Account chair fine image detail clear whatever.'
>>> blog.title
'Alexander Rivera'
>>> for 
KeyboardInterrupt
>>> blog.objects.all()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "/Users/stan/work/classes/PBS/pgs-django/venv/lib/python3.10/site-packages/django/db/models/manager.py", line 186, in __get__
    raise AttributeError(
AttributeError: Manager isn't accessible via Blog instances
>>> Blog.objects.all()
<QuerySet [<Blog: Test>, <Blog: test 3>, <Blog: >, <Blog: abc>, <Blog: abc1>, <Blog: Tabitha Evans>, <Blog: Mrs. Mary White>, <Blog: Samantha Blair>, <Blog: Scott Mitchell>, <Blog: Mr. Jason Tucker>, <Blog: Robert Harper>, <Blog: Jason Murray>, <Blog: Courtney Jones>, <Blog: Bianca Li>, <Blog: Samantha Mcdaniel>, <Blog: Erin Dixon>, <Blog: Jason Wood>, <Blog: James Dillon>, <Blog: Julie Smith>, <Blog: Chelsea Foley>, '...(remaining elements truncated)...']>
>>> blogs = Blog.objects.all()
>>> for b in blogs:
...     print(b.id)
... 
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
>>> for b in blogs:
...     b.
KeyboardInterrupt
>>> for b in blogs:
...    b.count = 100
... 
>>> for b in blogs:
...     b.count = 100
...     b.save()
... 
>>> for b in blogs:
...     b.like_count = 100
...     b.save()
... 
>>> from random import random
>>> for b in blogs:
...     b.like_count = random.randint(1, 1000)
...     b.save()
... 
Traceback (most recent call last):
  File "<console>", line 2, in <module>
AttributeError: 'builtin_function_or_method' object has no attribute 'randint'
>>> random
KeyboardInterrupt
>>> from random import random
>>> random.randint(1, 10)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'builtin_function_or_method' object has no attribute 'randint'
>>> import random
>>> random.randint(1, 10)
2
>>> for b in blogs:
...     b.like_count = random.randint(1, 1000)
...     b.save()
... 
>>> Blog.objects.filter(like_count=10)
<QuerySet []>
>>> Blog.objects.filter(like_count=101)
<QuerySet []>
>>> Blog.objects.filter(like_count=80)
<QuerySet [<Blog: Alexander Rivera>]>
>>> Blog.objects.get(like_count=80)
<Blog: Alexander Rivera>
>>> Blog.objects.filter(like_count=80)
<QuerySet [<Blog: Brian Smith>, <Blog: Alexander Rivera>]>
>>> Blog.objects.get(like_count=80)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "/Users/stan/work/classes/PBS/pgs-django/venv/lib/python3.10/site-packages/django/db/models/manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/stan/work/classes/PBS/pgs-django/venv/lib/python3.10/site-packages/django/db/models/query.py", line 652, in get
    raise self.model.MultipleObjectsReturned(
blog.models.Blog.MultipleObjectsReturned: get() returned more than one Blog -- it returned 2!
>>> Blog.objects.get(like_count__lt=80)
\Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "/Users/stan/work/classes/PBS/pgs-django/venv/lib/python3.10/site-packages/django/db/models/manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/stan/work/classes/PBS/pgs-django/venv/lib/python3.10/site-packages/django/db/models/query.py", line 652, in get
    raise self.model.MultipleObjectsReturned(
blog.models.Blog.MultipleObjectsReturned: get() returned more than one Blog -- it returned 12!
>>> Blog.objects.get(like_count__lt=80)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "/Users/stan/work/classes/PBS/pgs-django/venv/lib/python3.10/site-packages/django/db/models/manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/stan/work/classes/PBS/pgs-django/venv/lib/python3.10/site-packages/django/db/models/query.py", line 652, in get
    raise self.model.MultipleObjectsReturned(
blog.models.Blog.MultipleObjectsReturned: get() returned more than one Blog -- it returned 12!
>>> Blog.objects.filter(like_count__lt=80)
<QuerySet [<Blog: Kimberly Combs>, <Blog: Christopher Hester>, <Blog: Aaron Diaz>, <Blog: Jacqueline Harris>, <Blog: Gerald Moore>, <Blog: Bobby Huff>, <Blog: Jonathan Meza>, <Blog: Elizabeth Smith>, <Blog: Angela Hood>, <Blog: Ross Harrington>, <Blog: Paul Watts>, <Blog: Emily Kent>]>
>>> Blog.objects.filter(like_count__gt=80, like_count__lt=100)
>>> Blog.objects.filter(like_count = 80)
<QuerySet [<Blog: Brian Smith>, <Blog: Alexander Rivera>]>
>>> Blog.objects.get(like_count = 80)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "/Users/stan/work/classes/PBS/pgs-django/venv/lib/python3.10/site-packages/django/db/models/manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/stan/work/classes/PBS/pgs-django/venv/lib/python3.10/site-packages/django/db/models/query.py", line 652, in get
    raise self.model.MultipleObjectsReturned(
blog.models.Blog.MultipleObjectsReturned: get() returned more than one Blog -- it returned 2!
>>> Blog.objects.get(like_count = 80, title="Brian Smith")
<Blog: Brian Smith>